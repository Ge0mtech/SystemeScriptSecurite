#!/bin/bash

# =============================================================================
# Script d'installation pour l'API OpenWeather
# =============================================================================

set -euo pipefail

readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly RED='\033[0;31m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m'

print_colored() {
    local color="$1"
    local message="$2"
    echo -e "${color}${message}${NC}"
}

print_header() {
    echo
    print_colored "$BLUE" "============================================="
    print_colored "$BLUE" "    INSTALLATION SCRIPT API OPENWEATHER"
    print_colored "$BLUE" "============================================="
    echo
}

check_dependencies() {
    print_colored "$YELLOW" "üîç V√©rification des d√©pendances..."
    
    local missing_deps=()
    
    if ! command -v curl >/dev/null 2>&1; then
        missing_deps+=("curl")
    fi
    
    if ! command -v jq >/dev/null 2>&1; then
        missing_deps+=("jq")
    fi
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        print_colored "$RED" "‚ùå D√©pendances manquantes: ${missing_deps[*]}"
        echo
        
        if command -v apt >/dev/null 2>&1; then
            print_colored "$YELLOW" "Installation automatique (Ubuntu/Debian):"
            echo "sudo apt update && sudo apt install ${missing_deps[*]}"
            
            read -p "Voulez-vous installer automatiquement? (o/N): " -n 1 -r
            echo
            if [[ $REPLY =~ ^[OoYy]$ ]]; then
                sudo apt update && sudo apt install "${missing_deps[@]}"
            else
                print_colored "$RED" "Veuillez installer manuellement: ${missing_deps[*]}"
                exit 1
            fi
        elif command -v yum >/dev/null 2>&1; then
            print_colored "$YELLOW" "Installation manuelle requise (CentOS/RHEL):"
            echo "sudo yum install ${missing_deps[*]}"
            exit 1
        else
            print_colored "$RED" "Gestionnaire de paquets non support√©"
            print_colored "$YELLOW" "Veuillez installer manuellement: ${missing_deps[*]}"
            exit 1
        fi
    else
        print_colored "$GREEN" "‚úÖ Toutes les d√©pendances sont install√©es"
    fi
}

setup_permissions() {
    print_colored "$YELLOW" "üîê Configuration des permissions..."
    
    if [[ -f "openweather_api.sh" ]]; then
        chmod +x openweather_api.sh
        print_colored "$GREEN" "‚úÖ Script principal rendu ex√©cutable"
    else
        print_colored "$RED" "‚ùå Script principal non trouv√©"
        exit 1
    fi
}

setup_config() {
    print_colored "$YELLOW" "‚öôÔ∏è Configuration de l'API..."
    
    if [[ ! -f ".env" ]]; then
        print_colored "$RED" "‚ùå Fichier .env non trouv√©"
        exit 1
    fi
    
    # V√©rifier si la cl√© API est configur√©e
    if grep -q "your_api_key_here" .env; then
        print_colored "$YELLOW" "üîë Configuration de la cl√© API requise"
        echo
        print_colored "$BLUE" "Pour obtenir votre cl√© API:"
        echo "1. Visitez: https://openweathermap.org/api"
        echo "2. Cr√©ez un compte gratuit"
        echo "3. Obtenez votre cl√© API"
        echo
        
        read -p "Avez-vous votre cl√© API? (o/N): " -n 1 -r
        echo
        
        if [[ $REPLY =~ ^[OoYy]$ ]]; then
            echo
            read -p "Entrez votre cl√© API: " api_key
            
            if [[ -n "$api_key" && ${#api_key} -ge 32 ]]; then
                sed -i "s/your_api_key_here/$api_key/" .env
                print_colored "$GREEN" "‚úÖ Cl√© API configur√©e avec succ√®s"
            else
                print_colored "$RED" "‚ùå Cl√© API invalide (trop courte)"
                print_colored "$YELLOW" "Vous pouvez configurer la cl√© API plus tard en √©ditant le fichier .env"
            fi
        else
            print_colored "$YELLOW" "Vous pouvez configurer la cl√© API plus tard en √©ditant le fichier .env"
        fi
    else
        print_colored "$GREEN" "‚úÖ Cl√© API d√©j√† configur√©e"
    fi
}

update_api_key() {
    print_colored "$YELLOW" "üîë Mise √† jour de la cl√© API..."
    
    if [[ ! -f ".env" ]]; then
        print_colored "$RED" "‚ùå Fichier .env non trouv√©"
        exit 1
    fi
    
    # Afficher la cl√© API actuelle (masqu√©e)
    local current_key=$(grep "^API_KEY=" .env | cut -d'=' -f2)
    if [[ -n "$current_key" && "$current_key" != "your_api_key_here" ]]; then
        local masked_key="${current_key:0:8}...${current_key: -4}"
        print_colored "$BLUE" "Cl√© API actuelle: $masked_key"
    else
        print_colored "$YELLOW" "Aucune cl√© API configur√©e"
    fi
    
    echo
    print_colored "$BLUE" "Pour obtenir une nouvelle cl√© API:"
    echo "1. Visitez: https://openweathermap.org/api"
    echo "2. Connectez-vous √† votre compte"
    echo "3. G√©n√©rez une nouvelle cl√© API"
    echo
    
    read -p "Entrez votre nouvelle cl√© API: " new_api_key
    
    if [[ -z "$new_api_key" ]]; then
        print_colored "$RED" "‚ùå Cl√© API vide"
        exit 1
    fi
    
    if [[ ${#new_api_key} -lt 32 ]]; then
        print_colored "$RED" "‚ùå Cl√© API invalide (trop courte)"
        exit 1
    fi
    
    if [[ ! "$new_api_key" =~ ^[a-zA-Z0-9]+$ ]]; then
        print_colored "$RED" "‚ùå Cl√© API invalide (caract√®res non autoris√©s)"
        exit 1
    fi
    
    # Sauvegarder l'ancienne cl√©
    if [[ -n "$current_key" && "$current_key" != "your_api_key_here" ]]; then
        echo "# Ancienne cl√© API sauvegard√©e le $(date '+%Y-%m-%d %H:%M:%S')" >> .env.backup
        echo "# API_KEY_OLD=$current_key" >> .env.backup
        print_colored "$BLUE" "Ancienne cl√© sauvegard√©e dans .env.backup"
    fi
    
    # Mettre √† jour la cl√© API
    if grep -q "^API_KEY=" .env; then
        sed -i "s/^API_KEY=.*/API_KEY=$new_api_key/" .env
    else
        echo "API_KEY=$new_api_key" >> .env
    fi
    
    print_colored "$GREEN" "‚úÖ Cl√© API mise √† jour avec succ√®s"
    
    # Test de la nouvelle cl√©
    print_colored "$YELLOW" "üß™ Test de la nouvelle cl√© API..."
    if ./openweather_api.sh config >/dev/null 2>&1; then
        print_colored "$GREEN" "‚úÖ Nouvelle cl√© API valide"
    else
        print_colored "$RED" "‚ùå Erreur avec la nouvelle cl√© API"
        print_colored "$YELLOW" "V√©rifiez que la cl√© est correcte et active"
    fi
}

create_logs_directory() {
    print_colored "$YELLOW" "üìÅ Cr√©ation du r√©pertoire de logs..."
    
    if [[ ! -d "logs" ]]; then
        mkdir -p logs
        print_colored "$GREEN" "‚úÖ R√©pertoire logs cr√©√©"
    else
        print_colored "$GREEN" "‚úÖ R√©pertoire logs existe d√©j√†"
    fi
}

test_installation() {
    print_colored "$YELLOW" "üß™ Test de l'installation..."
    
    if ./openweather_api.sh help >/dev/null 2>&1; then
        print_colored "$GREEN" "‚úÖ Script fonctionnel"
    else
        print_colored "$RED" "‚ùå Erreur lors du test du script"
        exit 1
    fi
    
    if ./openweather_api.sh config >/dev/null 2>&1; then
        print_colored "$GREEN" "‚úÖ Configuration valide"
    else
        print_colored "$YELLOW" "‚ö†Ô∏è Configuration incompl√®te (cl√© API manquante?)"
    fi
}

show_usage_examples() {
    print_colored "$BLUE" "üìñ Exemples d'utilisation:"
    echo
    echo "# M√©t√©o actuelle"
    echo "./openweather_api.sh current"
    echo "./openweather_api.sh current \"New York\""
    echo
    echo "# Pr√©visions m√©t√©o"
    echo "./openweather_api.sh forecast"
    echo "./openweather_api.sh forecast \"Paris\" metric 3"
    echo
    echo "# Aide et configuration"
    echo "./openweather_api.sh help"
    echo "./openweather_api.sh config"
    echo
    echo "# Mise √† jour de la cl√© API"
    echo "./install.sh --update-api-key"
    echo
}

show_help() {
    print_colored "$BLUE" "Usage: $0 [OPTIONS]"
    echo
    echo "Options:"
    echo "  --update-api-key    Mettre √† jour la cl√© API OpenWeather"
    echo "  --help, -h          Afficher cette aide"
    echo
    echo "Sans option, lance l'installation compl√®te."
    echo
}

main() {
    # Gestion des arguments
    case "${1:-}" in
        "--update-api-key")
            print_header
            update_api_key
            print_colored "$GREEN" "üéâ Cl√© API mise √† jour!"
            echo
            show_usage_examples
            ;;
        "--help"|"-h")
            show_help
            ;;
        "")
            # Installation compl√®te (comportement par d√©faut)
            print_header
            
            check_dependencies
            setup_permissions
            create_logs_directory
            setup_config
            test_installation
            
            echo
            print_colored "$GREEN" "üéâ Installation termin√©e avec succ√®s!"
            echo
            
            show_usage_examples
            
            print_colored "$BLUE" "============================================="
            print_colored "$GREEN" "Pr√™t √† utiliser l'API OpenWeather!"
            print_colored "$BLUE" "============================================="
            ;;
        *)
            print_colored "$RED" "‚ùå Option inconnue: $1"
            echo
            show_help
            exit 1
            ;;
    esac
}

# V√©rification que nous sommes dans le bon r√©pertoire
if [[ ! -f "openweather_api.sh" ]]; then
    print_colored "$RED" "‚ùå Erreur: Script principal non trouv√©"
    print_colored "$YELLOW" "Assurez-vous d'ex√©cuter ce script depuis le r√©pertoire contenant openweather_api.sh"
    exit 1
fi

main "$@"
